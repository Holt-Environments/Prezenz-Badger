// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var expoleadsApiResponse = ExpoleadsApiResponse.FromJson(jsonString);

namespace QuickType
{
    using System;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExpoleadsApiResponse
    {
        [JsonProperty("errorCode")]
        public string ErrorCode { get; set; }

        [JsonProperty("errorText")]
        public string ErrorText { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("deviceId")]
        public string DeviceId { get; set; }

        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("scanCode")]
        public string ScanCode { get; set; }

        [JsonProperty("attendee")]
        public Attendee Attendee { get; set; }
    }

    public partial class Attendee
    {
        [JsonProperty("Badge ID")]
        public string BadgeId { get; set; }

        [JsonProperty("Member ID")]
        public string MemberId { get; set; }

        [JsonProperty("Name First")]
        public string NameFirst { get; set; }

        [JsonProperty("Name Last")]
        public string NameLast { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Company Name")]
        public string CompanyName { get; set; }

        [JsonProperty("Address1")]
        public string Address1 { get; set; }

        [JsonProperty("Address2")]
        public string Address2 { get; set; }

        [JsonProperty("Address City")]
        public string AddressCity { get; set; }

        [JsonProperty("Address State")]
        public string AddressState { get; set; }

        [JsonProperty("Address Postal")]
        public string AddressPostal { get; set; }

        [JsonProperty("Address Country")]
        public string AddressCountry { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("Email")]
        public string Email { get; set; }

        [JsonProperty("Registration Type")]
        public string RegistrationType { get; set; }
    }

    public partial class ExpoleadsApiResponse
    {
        public static ExpoleadsApiResponse FromJson(string json)
        {
            return JsonConvert.DeserializeObject<ExpoleadsApiResponse>(json, QuickType.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this ExpoleadsApiResponse self)
        {
            return JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
