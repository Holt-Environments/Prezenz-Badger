// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var apiResponse = ApiResponse.FromJson(jsonString);

namespace HoltEvironments
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ApiResponse
    {
        [JsonProperty("Success")]
        public bool Success { get; set; }

        [JsonProperty("Messages")]
        public object[] Messages { get; set; }

        [JsonProperty("LeadInfo")]
        public LeadInfo LeadInfo { get; set; }

        [JsonProperty("Demographics")]
        public Demographic[] Demographics { get; set; }
    }

    public partial class Demographic
    {
        [JsonProperty("Key")]
        public string Key { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Value")]
        public string Value { get; set; }
    }

    public partial class LeadInfo
    {
        [JsonProperty("LeadID")]
        public string LeadId { get; set; }

        [JsonProperty("CapturedDate")]
        public string CapturedDate { get; set; }

        [JsonProperty("CapturedBy")]
        public string CapturedBy { get; set; }

        [JsonProperty("ConnectKey")]
        public string ConnectKey { get; set; }

        [JsonProperty("FirstName")]
        public string FirstName { get; set; }

        [JsonProperty("LastName")]
        public string LastName { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Company")]
        public string Company { get; set; }

        [JsonProperty("Company2")]
        public string Company2 { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("Address2")]
        public string Address2 { get; set; }

        [JsonProperty("Address3")]
        public string Address3 { get; set; }

        [JsonProperty("City")]
        public string City { get; set; }

        [JsonProperty("StateCode")]
        public string StateCode { get; set; }

        [JsonProperty("ZipCode")]
        public string ZipCode { get; set; }

        [JsonProperty("CountryCode")]
        public string CountryCode { get; set; }

        [JsonProperty("Email")]
        public string Email { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("PhoneExtension")]
        public string PhoneExtension { get; set; }

        [JsonProperty("Fax")]
        public string Fax { get; set; }

        [JsonProperty("Notes")]
        public string Notes { get; set; }
    }

    public partial class ApiResponse
    {
        public static ApiResponse FromJson(string json) => JsonConvert.DeserializeObject<ApiResponse>(json, HoltEvironments.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ApiResponse self) => JsonConvert.SerializeObject(self, HoltEvironments.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
